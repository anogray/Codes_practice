/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
//https://leetcode.com/problems/linked-list-cycle-ii/submissions/
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        ListNode temp = head;

        System.out.println(head);
        if(head==null)
            return null;
        
        ListNode slow = head;
        ListNode fast = head;
        boolean flag = false;
        while(fast.next!=null && fast.next.next!=null)
        {
            fast = fast.next.next;
            slow = slow.next;
             if(slow==fast){
                 flag=true;
            break;
            }
        }
        
        if(flag==false)
            return null;
       
         slow = head;
        if(slow==fast){//if needed to break the loop fast.next=null;
            return slow;}
        
           while(slow.next != fast.next) {
                    slow = slow.next;
                    fast = fast.next;
                }
        //if needed to break the loop
        //fast.next=null;
        //         while(temp!=null)
        // {System.out.println(temp.val);
        // temp=temp.next;}
            return slow.next;
        
    }
}