//https://leetcode.com/problems/sort-characters-by-frequency/
class Solution {
    
    class pair implements Comparable<pair>{
        char character;
        int freq;
        pair(char character, int freq)
        {
            this.character = character;
            this.freq = freq;
        }
        public int compareTo(pair p)
        {
            return p.freq-this.freq;
        }
    }
    
    public String frequencySort(String s) {
    
    if(s.length()==0)
        return "";
    if(s.length()==1)
        return s;
        
    HashMap<Character,Integer> hm = new HashMap<>();
    
        for(int i=0;i<s.length();i++)
        {
            char ch = s.charAt(i);
            if(!hm.containsKey(ch))
                hm.put(ch,1);
            else
                hm.put(ch,hm.get(ch)+1);
        }

        StringBuilder sb = new StringBuilder("");
        PriorityQueue<pair> qu = new PriorityQueue<>();
        
        for(char key : hm.keySet())
        {
            qu.add(new pair(key,hm.get(key)));
              
        }
        
        while(qu.size()>0)
        {   
            pair rem = qu.remove();
            StringBuilder temp = new StringBuilder("");
            while(rem.freq>0)
            {
             temp.append(rem.character);
                rem.freq--;
            }
            sb.append(temp);
        }
        
        System.out.println(sb);
        String ans = new String(sb);
        return ans;
    }
}