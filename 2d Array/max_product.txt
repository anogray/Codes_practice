//https://leetcode.com/problems/maximum-product-subarray

class Solution {
    public int maxProduct(int[] nums) {
    
//         int curr_max = nums[0];
//         int curr_min = nums[0];
//         int result = nums[0];
        
//         for(int i = 1 ; i <nums.length; i++)
//         {
//             int last_max = curr_max;
//             curr_max = Math.max(nums[i], Math.max(curr_max * nums[i],curr_min*nums[i]));
//             curr_min = Math.min(nums[i], Math.min(last_max * nums[i],curr_min*nums[i]));
//             result =  Math.max(result, curr_max);
//             }
        boolean flag = false;
        if(nums.length<=0)
            return 0;
        //Integer.MIN_VALUE
        int cmax=1, omax=Integer.MIN_VALUE, tmax=Integer.MIN_VALUE;
        for(int i=0; i <nums.length; i++)
        {      
            if(nums[i]==0){
            flag=true;
               cmax=1;
               continue;
           }
           cmax = cmax * nums[i];
           
            omax = Math.max(omax, cmax);

        }

        cmax=1;
        for(int i=nums.length-1; i>=0; i--)
        {
           if(nums[i]==0){
               cmax=1;
               continue;
           }
            cmax = cmax * nums[i];
           
            tmax = Math.max(tmax, cmax);

        }

        int ans = Math.max(omax, tmax);
        System.out.println(ans);
        
        if(flag && ans<0)
        {
            return 0;
        }
        
        return ans;
    }
}